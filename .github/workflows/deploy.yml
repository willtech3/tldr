name: Deploy Slack Message Summarizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  AWS_REGION: us-east-2  # Change to your preferred region

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Rust code linting (PR only)
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
        if: github.event_name == 'pull_request'

      # Perform code formatting check
      - name: Check code formatting
        working-directory: ./lambda
        run: cargo fmt -- --check
        if: github.event_name == 'pull_request'

      # Run Clippy lints
      - name: Run Clippy lints
        working-directory: ./lambda
        run: cargo clippy -- -D warnings
        if: github.event_name == 'pull_request'

      # Run Rust tests
      - name: Run Rust tests
        working-directory: ./lambda
        run: cargo test --all-features
        if: github.event_name == 'pull_request'

      # Build Lambda functions using Docker
      - name: Build Lambda Functions
        run: |
          chmod +x build-local.sh
          ./build-local.sh

      # Extract built Lambda artifacts from the container
      - name: Extract Lambda artifacts
        run: |
          mkdir -p lambda/target/lambda/tldr-api
          mkdir -p lambda/target/lambda/tldr-worker
          docker create --name lambda-builder tldr-lambda-builder:latest
          docker cp lambda-builder:/tldr-api.zip lambda/target/lambda/tldr-api/bootstrap.zip
          docker cp lambda-builder:/tldr-worker.zip lambda/target/lambda/tldr-worker/bootstrap.zip
          docker rm lambda-builder
          echo '--- Verifying API Lambda artifact ---'
          ls -l lambda/target/lambda/tldr-api/bootstrap.zip || (echo 'API bootstrap.zip not found!' && exit 1)
          echo '--- Verifying Worker Lambda artifact ---'
          ls -l lambda/target/lambda/tldr-worker/bootstrap.zip || (echo 'Worker bootstrap.zip not found!' && exit 1)

      # Move cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      # Install CDK dependencies
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci

      # Build CDK TypeScript
      - name: Build CDK TypeScript
        run: |
          cd cdk
          npm run build

      # Configure AWS credentials for CDK deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Deploy with CDK (ensuring environment variables are properly defined and accessed)
      - name: Deploy with CDK
        run: |
          cd cdk
          # Create a secure cdk context file with secrets
          cat > cdk.context.json << EOF
          {
            "slackBotTokenSecretName": "SlackBotToken",
            "slackSigningSecretSecretName": "SlackSigningSecret", 
            "openAiApiKeySecretName": "OpenAiApiKey"
          }
          EOF
          # Deploy with the context file
          npm run cdk deploy -- --require-approval never
          # Clean up the context file
          rm cdk.context.json
        env:
          AWS_SECRET_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          AWS_SECRET_SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          AWS_SECRET_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
