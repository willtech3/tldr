name: Deploy Slack Message Summarizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  AWS_REGION: us-east-2  # Change to your preferred region

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Install cargo-lambda
      - name: Install cargo-lambda
        run: |
          cargo install cargo-lambda
          echo "Installed cargo-lambda version:"
          cargo lambda --version

      # Build the Lambda functions using Docker
      - name: Build Lambda functions
        run: |
          cd lambda

          # Build API Lambda function binary
          echo "--- Building API Lambda Binary ---"
          cargo lambda build --docker --release --bin tldr-api --features api --output-format zip

          # Build Worker Lambda function binary
          echo "--- Building Worker Lambda Binary ---"
          cargo lambda build --docker --release --bin tldr-worker --features worker --output-format zip

          cd .. # Go back to repo root

          # Verify the build artifacts exist and are non-empty
          echo "--- Verifying API Lambda artifact ---"
          ls -l lambda/target/lambda/tldr-api/bootstrap.zip || (echo "API bootstrap.zip not found!" && exit 1)
          echo "--- Verifying Worker Lambda artifact ---"
          ls -l lambda/target/lambda/tldr-worker/bootstrap.zip || (echo "Worker bootstrap.zip not found!" && exit 1)

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      # Install CDK dependencies
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci

      # Build CDK TypeScript
      - name: Build CDK TypeScript
        run: |
          cd cdk
          npm run build

      # Configure AWS credentials for CDK deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Deploy with CDK
      - name: Deploy with CDK
        run: |
          cd cdk
          npm run cdk deploy -- --require-approval never
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
