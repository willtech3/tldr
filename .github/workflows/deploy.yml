name: Deploy Slack Message Summarizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  AWS_REGION: us-east-2  # Change to your preferred region

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    container:
      image: rust:1.86
    steps:
      - uses: actions/checkout@v3

      # Cache cargo registry for faster cargo install
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      # Cache cargo bin for faster cargo-lambda reuse
      - name: Cache cargo bin
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-cargo-lambda-latest

      # Install cargo-lambda from crates.io (will skip if already present)
      - name: Install cargo-lambda
        run: cargo install cargo-lambda --locked

      # Setup Zig for cross-compilation
      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0 # Or the latest stable version

      # Build the Lambda functions
      - name: Build Lambda functions (manual)
        run: |
          cd lambda
          echo '--- Building API Lambda Binary ---'
          cargo lambda build --release --bin tldr-api --features api --target x86_64-unknown-linux-musl --output-format zip
          echo '--- Building Worker Lambda Binary ---'
          cargo lambda build --release --bin tldr-worker --features worker --target x86_64-unknown-linux-musl --output-format zip
          echo '--- Verifying API Lambda artifact ---'
          ls -l target/lambda/tldr-api/bootstrap.zip || (echo 'API bootstrap.zip not found!' && exit 1)
          echo '--- Verifying Worker Lambda artifact ---'
          ls -l target/lambda/tldr-worker/bootstrap.zip || (echo 'Worker bootstrap.zip not found!' && exit 1)

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      # Install CDK dependencies
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci

      # Build CDK TypeScript
      - name: Build CDK TypeScript
        run: |
          cd cdk
          npm run build

      # Configure AWS credentials for CDK deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Deploy with CDK
      - name: Deploy with CDK
        run: |
          cd cdk
          npm run cdk deploy -- --require-approval never
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
