name: Deploy Slack Message Summarizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  AWS_REGION: us-east-2  # Change to your preferred region

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Diagnostic step: print cargo/rust config and env
      - name: Print Cargo and Rust config
        run: |
          echo "---- ~/.cargo/config ----"
          cat ~/.cargo/config || echo "No ~/.cargo/config"
          echo "---- ~/.cargo/config.toml ----"
          cat ~/.cargo/config.toml || echo "No ~/.cargo/config.toml"
          echo "---- RUSTFLAGS ----"
          echo "${RUSTFLAGS:-not set}"
          echo "---- rustc version ----"
          rustc --version
          echo "---- cargo version ----"
          cargo --version

      # Build the Lambda functions using a specific cargo-lambda version
      - name: Build Lambda functions
        uses: docker://ghcr.io/cargo-lambda/cargo-lambda:1.7.0
        with:
          entrypoint: /bin/bash
          args: |
            -c "unset RUSTFLAGS && \
            cd lambda && \
            echo '--- Building API Lambda Binary ---' && \
            cargo lambda build --release --bin tldr-api --features api --target x86_64-unknown-linux-musl --output-format zip && \
            echo '--- Building Worker Lambda Binary ---' && \
            cargo lambda build --release --bin tldr-worker --features worker --target x86_64-unknown-linux-musl --output-format zip && \
            echo '--- Verifying API Lambda artifact ---' && \
            ls -l target/lambda/tldr-api/bootstrap.zip || (echo 'API bootstrap.zip not found!' && exit 1) && \
            echo '--- Verifying Worker Lambda artifact ---' && \
            ls -l target/lambda/tldr-worker/bootstrap.zip || (echo 'Worker bootstrap.zip not found!' && exit 1)"

      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      # Install CDK dependencies
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci

      # Build CDK TypeScript
      - name: Build CDK TypeScript
        run: |
          cd cdk
          npm run build

      # Configure AWS credentials for CDK deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Deploy with CDK
      - name: Deploy with CDK
        run: |
          cd cdk
          npm run cdk deploy -- --require-approval never
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
