name: Deploy Slack Message Summarizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  AWS_REGION: us-east-2  # Change to your preferred region

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Rust code linting (PR only)
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
        if: github.event_name == 'pull_request'

      # Perform code formatting check
      - name: Check code formatting
        working-directory: ./lambda
        run: cargo fmt -- --check
        if: github.event_name == 'pull_request'

      # Run Clippy lints
      - name: Run Clippy lints
        working-directory: ./lambda
        run: cargo clippy -- -D warnings
        if: github.event_name == 'pull_request'

      # Run Rust tests
      - name: Run Rust tests
        working-directory: ./lambda
        run: cargo test --all-features
        if: github.event_name == 'pull_request'

      # Build Lambda functions using Docker (only for deployments)
      - name: Build Lambda Functions
        run: |
          chmod +x build-local.sh
          ./build-local.sh
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Extract built Lambda artifacts from the container (only for deployments)
      - name: Extract Lambda artifacts
        run: |
          mkdir -p lambda/target/lambda/tldr-api
          mkdir -p lambda/target/lambda/tldr-worker
          docker create --name lambda-builder tldr-lambda-builder:latest
          docker cp lambda-builder:/tldr-api.zip lambda/target/lambda/tldr-api/function.zip
          docker cp lambda-builder:/tldr-worker.zip lambda/target/lambda/tldr-worker/function.zip
          docker rm lambda-builder
          echo '--- Verifying API Lambda artifact ---'
          ls -l lambda/target/lambda/tldr-api/function.zip || (echo 'API function.zip not found!' && exit 1)
          echo '--- Verifying Worker Lambda artifact ---'
          ls -l lambda/target/lambda/tldr-worker/function.zip || (echo 'Worker function.zip not found!' && exit 1)
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Skip the cache move step since we're not using docker/build-push-action
      # The move cache step is needed only when using docker/build-push-action with cache-to

      # Setup Node.js (only for deployments)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Install CDK dependencies (only for deployments)
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Build CDK TypeScript (only for deployments)
      - name: Build CDK TypeScript
        run: |
          cd cdk
          npm run build
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

        # Configure AWS credentials for CDK deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionsSession
          role-duration-seconds: 3600
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Deploy with CDK (ensuring environment variables are properly defined and accessed)
      - name: Deploy with CDK
        run: |
          cd cdk
          # Create a secure cdk context file with secrets
          cat > cdk.context.json << 'EOF'
          {
            "slackBotTokenSecretName": "SlackBotToken",
            "slackSigningSecretSecretName": "SlackSigningSecret",
            "openAiApiKeySecretName": "OpenAiApiKey"
          }
          EOF
          npm run cdk deploy -- --require-approval never --outputs-file cdk-outputs.json
          rm cdk.context.json
          
          # Display API Gateway URL from CDK outputs for manual Slack manifest update
          echo "📌 API Gateway URL for Slack manifest:"
          python3 -c "import json; data = json.load(open('cdk-outputs.json')); print(data['TldrStack']['ApiGatewayUrl'])"
          echo "ℹ️  Update your Slack app manifest with this URL at api.slack.com/apps"
        env:
          SLACK_BOT_TOKEN:      ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          OPENAI_API_KEY:       ${{ secrets.OPENAI_API_KEY }}
          OPENAI_ORG_ID:        ${{ secrets.OPENAI_ORG_ID }}
          # Slack OAuth credentials required at synth/runtime
          SLACK_CLIENT_ID:      ${{ secrets.SLACK_CLIENT_ID }}
          SLACK_CLIENT_SECRET:  ${{ secrets.SLACK_CLIENT_SECRET }}
          # Optional explicit redirect; otherwise derived from headers in code
          SLACK_REDIRECT_URL:   ${{ secrets.SLACK_REDIRECT_URL }}
          # Ensure region/account for CDK
          CDK_DEFAULT_REGION:   ${{ env.AWS_REGION }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      # Slack manifest updates must be done manually
      # See SLACK_APP_SETUP.md for instructions

